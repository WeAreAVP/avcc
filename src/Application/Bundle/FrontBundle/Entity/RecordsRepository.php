<?php

/**
 * AVCC
 * 
 * @category AVCC
 * @package  Application
 * @author   Nouman Tayyab <nouman@weareavp.com>
 * @author   Rimsha Khalid <rimsha@weareavp.com>
 * @license  AGPLv3 http://www.gnu.org/licenses/agpl-3.0.txt
 * @copyright Audio Visual Preservation Solutions, Inc
 * @link     http://avcc.weareavp.com
 */

namespace Application\Bundle\FrontBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RecordsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecordsRepository extends EntityRepository {

    public function findOrganizationRecords($organizationID) {
        $query = $this->getEntityManager()
                ->createQuery("SELECT r from ApplicationFrontBundle:Records r "
                . "JOIN r.project p " 
                . "JOIN p.organization o "
                . "WHERE o.id =  :organization");
        $query->setParameter('organization', $organizationID);
        return $query->getResult();
    }

    public function countOrganizationRecord($organizationID) {
        $query = $this->getEntityManager()
                ->createQuery("SELECT COUNT(r.id) as total from ApplicationFrontBundle:Records r "
                . "JOIN r.user u "
                . "JOIN u.organizations o "
                . "WHERE o.id =  :organization");
        $query->setParameter('organization', $organizationID);
        return $query->getSingleResult();
    }

    public function countOrganizationRecords($organizationID) {
        $query = $this->getEntityManager()
                ->createQuery("SELECT COUNT(r.id) as total from ApplicationFrontBundle:Records r "
                . "JOIN r.project u "
                . "JOIN u.organization o "
                . "WHERE o.id =  :organization");
        $query->setParameter('organization', $organizationID);
        return $query->getSingleResult();
    }

    public function findOrganizationRecord($organizationID) {
        $query = $this->getEntityManager()
                ->createQuery("SELECT r from ApplicationFrontBundle:Records r "
                . "JOIN r.project u "
                . "JOIN u.organization o "
                . "WHERE o.id =  :organization");
        $query->setParameter('organization', $organizationID);

        return $query->getResult();
    }

    public function findAudioRecordById($id) {
        return $this->getEntityManager()->createQuery("SELECT r as record, ar as audio, m.name as mediaType, p.name as projectTitle"
                                . " FROM ApplicationFrontBundle:Records r"
                                . " JOIN ApplicationFrontBundle:MediaTypes m WITH r.mediaType = m.id"
                                . " JOIN ApplicationFrontBundle:Projects p WITH r.project = p.id"
                                . " JOIN ApplicationFrontBundle:AudioRecords ar WITH ar.record = r.id "
                                . " Where r.id = $id"
                        )
                        ->getArrayResult();
    }

    public function findRecordsByType($typeRecordId, $typeId) {
        $where = "";
        $join = '';
        if ($typeId == 1) {
            $join = "JOIN r.audioRecord a ";
            $where = "WHERE a.id =  :typeRecordId";
        } elseif ($typeId == 2) {
            $join = "JOIN r.filmRecord f ";
            $where = "WHERE f.id =  :typeRecordId";
        } else {
            $join = "JOIN r.videoRecord v ";
            $where = "WHERE v.id =  :typeRecordId";
        }
        $query = $this->getEntityManager()
                ->createQuery("SELECT r from ApplicationFrontBundle:Records r "
                . "JOIN r.user u "
                . "JOIN u.organizations o "
                . $join
//        . $join
                . $where);
        $query->setParameter('typeRecordId', $typeRecordId);

        return $query->getSingleResult();
    }

    public function findRecordsByIds($ids) {
        $query = $this->getEntityManager()
                ->createQuery("SELECT r from ApplicationFrontBundle:Records r "
                . "WHERE r.id IN  (:ids)");
        $query->setParameter('ids', $ids);

        return $query->getResult();
    }

    public function findAllUniqueIds() {
        $uniqueids = $this->getEntityManager()->createQuery('SELECT r.uniqueId'
                        . ' from ApplicationFrontBundle:Records r'
                )->getScalarResult();
        $ids = array_map("current", $uniqueids);

        return $ids;
    }

    public function findRecordsByIdsArray($ids) {
        $query = $this->getEntityManager()->createQuery("SELECT r as record, ar as audio, m.name as mediaType, vr as video, fr as film, p.name as projectTitle"
                        . " FROM ApplicationFrontBundle:Records r"
                        . " LEFT JOIN ApplicationFrontBundle:MediaTypes m WITH r.mediaType = m.id"
                        . " LEFT JOIN ApplicationFrontBundle:Projects p WITH r.project = p.id"
                        . " LEFT JOIN ApplicationFrontBundle:AudioRecords ar WITH ar.record = r.id "
                        . " LEFT JOIN ApplicationFrontBundle:VideoRecords vr WITH vr.record = r.id "
                        . " LEFT JOIN ApplicationFrontBundle:FilmRecords fr WITH fr.record = r.id "
                        . " Where r.id = $ids"
                )
                ->getResult(2);
        return $query;
    }

    public function findOrganizationUniqueRecords($organizationID, $unique_id, $id) {

        if ($id == 0) {
            $where = 'WHERE o.id =  :organization AND r.uniqueId = :unique';
        } else {
            $where = 'WHERE o.id =  :organization AND r.uniqueId = :unique AND r.id != :id';
        }
        $query = $this->getEntityManager()
                ->createQuery("SELECT r.uniqueId, r.id from ApplicationFrontBundle:Records r "
                . "JOIN r.project u "
                . "JOIN u.organization o "
                . $where);
        $query->setParameter('organization', $organizationID);
        $query->setParameter('unique', $unique_id);

        if ($id != 0) {
            $query->setParameter('id', $id);
        }
        return $query->getResult();
    }

    public function getDataForDashboard($pid, $digitized, $org = NULL) {
        $where = '';
        if ($pid > 0) {
            $where .= " Where r.project = " . $pid;
        }
        if ($org > 0) {
            if (empty($where)) {
                $where .= ' Where o.id = ' . $org;
            } else {
                $where .= ' AND o.id = ' . $org;
            }
        }
        $query = $this->getEntityManager()->createQuery("SELECT count(r.id) AS total,u.id as projectId,f.id as formatId, f.width as width,f.name as format,m.name as media,m.id as mediaId"
                . ",SUM(IF(r.contentDuration > 0, r.contentDuration, ar.mediaDuration)) as audio_sum,"
                . "SUM(IF(r.contentDuration > 0, r.contentDuration, vr.mediaDuration)) as video_sum, "
                . "SUM(r.contentDuration) as film_sum, Sum(fr.footage) as sum_footage,r.digitized"
                . " FROM ApplicationFrontBundle:Records r"
                . " LEFT JOIN ApplicationFrontBundle:MediaTypes m WITH r.mediaType = m.id"
                . " LEFT JOIN ApplicationFrontBundle:Formats f WITH r.format = f.id"
                . " LEFT JOIN ApplicationFrontBundle:AudioRecords ar WITH ar.record = r.id "
                . " LEFT JOIN ApplicationFrontBundle:VideoRecords vr WITH vr.record = r.id "
                . " LEFT JOIN ApplicationFrontBundle:FilmRecords fr WITH fr.record = r.id "
                . " LEFT JOIN r.project u "
                . " LEFT JOIN u.organization o "
                . $where
                . " GROUP BY r.project, r.mediaType, r.format, r.digitized"
        );
        return $query->getResult();
    }

    public function countRecords($pid, $digitized = -1, $org = 0) {
        $where = '';
        if ($pid > 0) {
            $where .= " Where r.format = " . $pid;
        }
        if ($digitized >= 0) {
            if (empty($where)) {
                $where .= " Where r.digitized = " . $digitized;
            } else {
                $where .= " AND r.digitized = " . $digitized;
            }
        }
        if ($org > 0) {
            if (empty($where)) {
                $where .= ' Where o.id = ' . $org;
            } else {
                $where .= ' AND o.id = ' . $org;
            }
        }
        $query = $this->getEntityManager()->createQuery("SELECT count(r.id) AS total"
                . " FROM ApplicationFrontBundle:Records r"
                . " JOIN r.project u "
                . " JOIN u.organization o "
                . $where
                . " GROUP BY r.mediaType"
        );
        return $query->getResult();
    }

}
